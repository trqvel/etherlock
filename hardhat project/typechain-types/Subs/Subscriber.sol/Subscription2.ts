/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface Subscription2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "cancelSubscription"
      | "checkSubscription"
      | "makePayment"
      | "startSubscription"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "PaymentMade"
      | "SubscriptionCancelled"
      | "SubscriptionStarted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "cancelSubscription",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkSubscription",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "makePayment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startSubscription",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makePayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace PaymentMadeEvent {
  export type InputTuple = [subscriber: AddressLike, amount: BigNumberish];
  export type OutputTuple = [subscriber: string, amount: bigint];
  export interface OutputObject {
    subscriber: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionCancelledEvent {
  export type InputTuple = [subscriber: AddressLike];
  export type OutputTuple = [subscriber: string];
  export interface OutputObject {
    subscriber: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionStartedEvent {
  export type InputTuple = [subscriber: AddressLike, duration: BigNumberish];
  export type OutputTuple = [subscriber: string, duration: bigint];
  export interface OutputObject {
    subscriber: string;
    duration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Subscription2 extends BaseContract {
  connect(runner?: ContractRunner | null): Subscription2;
  waitForDeployment(): Promise<this>;

  interface: Subscription2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cancelSubscription: TypedContractMethod<[], [void], "nonpayable">;

  checkSubscription: TypedContractMethod<
    [subscriber: AddressLike],
    [void],
    "nonpayable"
  >;

  makePayment: TypedContractMethod<[], [void], "nonpayable">;

  startSubscription: TypedContractMethod<
    [duration: BigNumberish],
    [void],
    "payable"
  >;

  withdraw: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cancelSubscription"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "checkSubscription"
  ): TypedContractMethod<[subscriber: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "makePayment"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startSubscription"
  ): TypedContractMethod<[duration: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "PaymentMade"
  ): TypedContractEvent<
    PaymentMadeEvent.InputTuple,
    PaymentMadeEvent.OutputTuple,
    PaymentMadeEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionCancelled"
  ): TypedContractEvent<
    SubscriptionCancelledEvent.InputTuple,
    SubscriptionCancelledEvent.OutputTuple,
    SubscriptionCancelledEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionStarted"
  ): TypedContractEvent<
    SubscriptionStartedEvent.InputTuple,
    SubscriptionStartedEvent.OutputTuple,
    SubscriptionStartedEvent.OutputObject
  >;

  filters: {
    "PaymentMade(address,uint256)": TypedContractEvent<
      PaymentMadeEvent.InputTuple,
      PaymentMadeEvent.OutputTuple,
      PaymentMadeEvent.OutputObject
    >;
    PaymentMade: TypedContractEvent<
      PaymentMadeEvent.InputTuple,
      PaymentMadeEvent.OutputTuple,
      PaymentMadeEvent.OutputObject
    >;

    "SubscriptionCancelled(address)": TypedContractEvent<
      SubscriptionCancelledEvent.InputTuple,
      SubscriptionCancelledEvent.OutputTuple,
      SubscriptionCancelledEvent.OutputObject
    >;
    SubscriptionCancelled: TypedContractEvent<
      SubscriptionCancelledEvent.InputTuple,
      SubscriptionCancelledEvent.OutputTuple,
      SubscriptionCancelledEvent.OutputObject
    >;

    "SubscriptionStarted(address,uint256)": TypedContractEvent<
      SubscriptionStartedEvent.InputTuple,
      SubscriptionStartedEvent.OutputTuple,
      SubscriptionStartedEvent.OutputObject
    >;
    SubscriptionStarted: TypedContractEvent<
      SubscriptionStartedEvent.InputTuple,
      SubscriptionStartedEvent.OutputTuple,
      SubscriptionStartedEvent.OutputObject
    >;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface EtherlockFactoryTest1Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "contractLimits"
      | "contractOwners"
      | "contracts"
      | "createContract"
      | "createContractWithDefault"
      | "depositToken"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ContractCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "contractLimits",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "contractOwners",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "contracts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createContract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createContractWithDefault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositToken",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "contractLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractOwners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "contracts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createContractWithDefault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositToken",
    data: BytesLike
  ): Result;
}

export namespace ContractCreatedEvent {
  export type InputTuple = [contractId: BigNumberish, owner: AddressLike];
  export type OutputTuple = [contractId: bigint, owner: string];
  export interface OutputObject {
    contractId: bigint;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EtherlockFactoryTest1 extends BaseContract {
  connect(runner?: ContractRunner | null): EtherlockFactoryTest1;
  waitForDeployment(): Promise<this>;

  interface: EtherlockFactoryTest1Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  contractLimits: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  contractOwners: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  contracts: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  createContract: TypedContractMethod<
    [maxContracts: BigNumberish],
    [void],
    "payable"
  >;

  createContractWithDefault: TypedContractMethod<[], [void], "nonpayable">;

  depositToken: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "contractLimits"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "contractOwners"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "contracts"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "createContract"
  ): TypedContractMethod<[maxContracts: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "createContractWithDefault"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "depositToken"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "ContractCreated"
  ): TypedContractEvent<
    ContractCreatedEvent.InputTuple,
    ContractCreatedEvent.OutputTuple,
    ContractCreatedEvent.OutputObject
  >;

  filters: {
    "ContractCreated(uint256,address)": TypedContractEvent<
      ContractCreatedEvent.InputTuple,
      ContractCreatedEvent.OutputTuple,
      ContractCreatedEvent.OutputObject
    >;
    ContractCreated: TypedContractEvent<
      ContractCreatedEvent.InputTuple,
      ContractCreatedEvent.OutputTuple,
      ContractCreatedEvent.OutputObject
    >;
  };
}

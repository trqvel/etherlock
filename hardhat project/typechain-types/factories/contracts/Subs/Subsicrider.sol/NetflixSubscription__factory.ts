/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  NetflixSubscription,
  NetflixSubscriptionInterface,
} from "../../../../contracts/Subs/Subsicrider.sol/NetflixSubscription";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_time",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_subscriptions",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_withdrawAddress",
        type: "address",
      },
    ],
    name: "Deposit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_subscriber",
        type: "address",
      },
    ],
    name: "SubscriptionCancelled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "Withdrawal",
    type: "event",
  },
  {
    inputs: [],
    name: "cancelSubscription",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "time",
        type: "uint256",
      },
      {
        internalType: "address payable",
        name: "address_to_withdraw",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "how_many_subscriptions",
        type: "uint256",
      },
    ],
    name: "deposite",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "make_scheduled_payments",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "subscriptions",
    outputs: [
      {
        internalType: "address",
        name: "subscriber",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "expiry",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "withdrawAddresses",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610f3a806100606000396000f3fe6080604052600436106100705760003560e01c80634fdee6ba1161004e5780634fdee6ba146100e1578063641ba92e1461011e5780638da5cb5b1461013a578063d823e56f1461016557610070565b806324e9edb0146100755780632d5bbf601461008c5780633ccfd60b146100ca575b600080fd5b34801561008157600080fd5b5061008a61017c565b005b34801561009857600080fd5b506100b360048036038101906100ae919061097a565b6102b6565b6040516100c19291906109f7565b60405180910390f35b3480156100d657600080fd5b506100df61030a565b005b3480156100ed57600080fd5b5061010860048036038101906101039190610a4c565b61047e565b6040516101159190610a9a565b60405180910390f35b61013860048036038101906101339190610ae1565b6104b1565b005b34801561014657600080fd5b5061014f610700565b60405161015c9190610b48565b60405180910390f35b34801561017157600080fd5b5061017a610724565b005b60005b6001805490508110156102b3573373ffffffffffffffffffffffffffffffffffffffff16600182815481106101b7576101b6610b63565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036102a0576001818154811061021857610217610b63565b5b9060005260206000209060020201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000905550503373ffffffffffffffffffffffffffffffffffffffff167f71215198e3f86c24dc3af6d0d7f84d0095e5ee736aa56daf9927fae51935e95d60405160405180910390a26102b3565b80806102ab90610bc1565b91505061017f565b50565b600181815481106102c657600080fd5b90600052602060002090600202016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610398576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038f90610c8c565b60405180910390fd5b6000479050600081116103e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d790610cf8565b60405180910390fd5b60003390508073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f1935050505015801561042b573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65836040516104729190610d18565b60405180910390a25050565b60026020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b8334146104f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ea90610da5565b60405180910390fd5b60008111610536576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052d90610e37565b60405180910390fd5b600081846105449190610e57565b90506000603c826105559190610e57565b426105609190610e99565b9050600060405180604001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001838152509050600181908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155505084600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fede963da60ce3b657af455d654d08ff95549f13a4acb219b68756f68755e28e33489886040516106ef93929190610ecd565b60405180910390a350505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a990610c8c565b60405180910390fd5b60005b60018054905081101561093c5742600182815481106107d7576107d6610b63565b5b9060005260206000209060020201600101541015610929576000600260006001848154811061080957610808610b63565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156108de573d6000803e3d6000fd5b506001826108ec9190610e99565b60018381548110610900576108ff610b63565b5b906000526020600020906002020160010160008282546109209190610e99565b92505081905550505b808061093490610bc1565b9150506107b5565b50565b600080fd5b6000819050919050565b61095781610944565b811461096257600080fd5b50565b6000813590506109748161094e565b92915050565b6000602082840312156109905761098f61093f565b5b600061099e84828501610965565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109d2826109a7565b9050919050565b6109e2816109c7565b82525050565b6109f181610944565b82525050565b6000604082019050610a0c60008301856109d9565b610a1960208301846109e8565b9392505050565b610a29816109c7565b8114610a3457600080fd5b50565b600081359050610a4681610a20565b92915050565b600060208284031215610a6257610a6161093f565b5b6000610a7084828501610a37565b91505092915050565b6000610a84826109a7565b9050919050565b610a9481610a79565b82525050565b6000602082019050610aaf6000830184610a8b565b92915050565b610abe81610a79565b8114610ac957600080fd5b50565b600081359050610adb81610ab5565b92915050565b60008060008060808587031215610afb57610afa61093f565b5b6000610b0987828801610965565b9450506020610b1a87828801610965565b9350506040610b2b87828801610acc565b9250506060610b3c87828801610965565b91505092959194509250565b6000602082019050610b5d60008301846109d9565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610bcc82610944565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610bfe57610bfd610b92565b5b600182019050919050565b600082825260208201905092915050565b7f4f6e6c7920746865206f776e65722063616e2063616c6c20746869732066756e60008201527f6374696f6e000000000000000000000000000000000000000000000000000000602082015250565b6000610c76602583610c09565b9150610c8182610c1a565b604082019050919050565b60006020820190508181036000830152610ca581610c69565b9050919050565b7f546865726520617265206e6f2066756e647320746f2077697468647261770000600082015250565b6000610ce2601e83610c09565b9150610ced82610cac565b602082019050919050565b60006020820190508181036000830152610d1181610cd5565b9050919050565b6000602082019050610d2d60008301846109e8565b92915050565b7f54686520616d6f756e7420796f752073656e7420646f6573206e6f74206d617460008201527f63682074686520726571756972656420616d6f756e7400000000000000000000602082015250565b6000610d8f603683610c09565b9150610d9a82610d33565b604082019050919050565b60006020820190508181036000830152610dbe81610d82565b9050919050565b7f546865206e756d626572206f6620737562736372697074696f6e732073686f7560008201527f6c642062652067726561746572207468616e2030000000000000000000000000602082015250565b6000610e21603483610c09565b9150610e2c82610dc5565b604082019050919050565b60006020820190508181036000830152610e5081610e14565b9050919050565b6000610e6282610944565b9150610e6d83610944565b9250828202610e7b81610944565b91508282048414831517610e9257610e91610b92565b5b5092915050565b6000610ea482610944565b9150610eaf83610944565b9250828201905080821115610ec757610ec6610b92565b5b92915050565b6000606082019050610ee260008301866109e8565b610eef60208301856109e8565b610efc60408301846109e8565b94935050505056fea264697066735822122021d71d41be1379d2267a775b96c713377160cb52afc0633919ecf078e21a953a64736f6c63430008130033";

type NetflixSubscriptionConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NetflixSubscriptionConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NetflixSubscription__factory extends ContractFactory {
  constructor(...args: NetflixSubscriptionConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      NetflixSubscription & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): NetflixSubscription__factory {
    return super.connect(runner) as NetflixSubscription__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NetflixSubscriptionInterface {
    return new Interface(_abi) as NetflixSubscriptionInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): NetflixSubscription {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as NetflixSubscription;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MyContractFactory,
  MyContractFactoryInterface,
} from "../../../Fabric/FabricSmart.sol/MyContractFactory";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "contractAddress",
        type: "address",
      },
    ],
    name: "ContractCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Withdrawal",
    type: "event",
  },
  {
    inputs: [],
    name: "contractCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_count",
        type: "uint256",
      },
    ],
    name: "createContracts",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "userToContracts",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610b18806100616000396000f3fe60806040526004361061004a5760003560e01c80632e1a7d4d1461004f5780633208aae114610078578063413c935e146100945780638736381a146100d15780638da5cb5b146100fc575b600080fd5b34801561005b57600080fd5b5061007660048036038101906100719190610552565b610127565b005b610092600480360381019061008d9190610552565b6102d6565b005b3480156100a057600080fd5b506100bb60048036038101906100b691906105dd565b610490565b6040516100c8919061062c565b60405180910390f35b3480156100dd57600080fd5b506100e66104de565b6040516100f39190610656565b60405180910390f35b34801561010857600080fd5b506101116104e4565b60405161011e919061062c565b60405180910390f35b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ae906106f4565b60405180910390fd5b478111156101fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f190610760565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610262573d6000803e3d6000fd5b50600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65826040516102cb9190610656565b60405180910390a250565b600066038d7ea4c68000826102eb91906107af565b905080341461032f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032690610863565b60405180910390fd5b60005b8281101561048b576000336040516103499061050a565b610353919061062c565b604051809103906000f08015801561036f573d6000803e3d6000fd5b5090506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600081548092919061042490610883565b91905055503373ffffffffffffffffffffffffffffffffffffffff167f2d49c67975aadd2d389580b368cfff5b49965b0bd5da33c144922ce01e7a4d7b8260405161046f919061062c565b60405180910390a250808061048390610883565b915050610332565b505050565b600060205281600052604060002081815481106104ac57600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610217806108cc83390190565b600080fd5b6000819050919050565b61052f8161051c565b811461053a57600080fd5b50565b60008135905061054c81610526565b92915050565b60006020828403121561056857610567610517565b5b60006105768482850161053d565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105aa8261057f565b9050919050565b6105ba8161059f565b81146105c557600080fd5b50565b6000813590506105d7816105b1565b92915050565b600080604083850312156105f4576105f3610517565b5b6000610602858286016105c8565b92505060206106138582860161053d565b9150509250929050565b6106268161059f565b82525050565b6000602082019050610641600083018461061d565b92915050565b6106508161051c565b82525050565b600060208201905061066b6000830184610647565b92915050565b600082825260208201905092915050565b7f4f6e6c792074686520636f6e7472616374206f776e65722063616e207769746860008201527f647261772066756e647300000000000000000000000000000000000000000000602082015250565b60006106de602a83610671565b91506106e982610682565b604082019050919050565b6000602082019050818103600083015261070d816106d1565b9050919050565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b600061074a601483610671565b915061075582610714565b602082019050919050565b600060208201905081810360008301526107798161073d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006107ba8261051c565b91506107c58361051c565b92508282026107d38161051c565b915082820484148315176107ea576107e9610780565b5b5092915050565b7f596f75206e65656420746f2073656e642074686520636f727265637420616d6f60008201527f756e74206f662045544800000000000000000000000000000000000000000000602082015250565b600061084d602a83610671565b9150610858826107f1565b604082019050919050565b6000602082019050818103600083015261087c81610840565b9050919050565b600061088e8261051c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036108c0576108bf610780565b5b60018201905091905056fe608060405234801561001057600080fd5b50604051610217380380610217833981810160405281019061003291906100db565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610108565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100a88261007d565b9050919050565b6100b88161009d565b81146100c357600080fd5b50565b6000815190506100d5816100af565b92915050565b6000602082840312156100f1576100f0610078565b5b60006100ff848285016100c6565b91505092915050565b610100806101176000396000f3fe608060405260043610601f5760003560e01c80638da5cb5b14602a576025565b36602557005b600080fd5b348015603557600080fd5b50603c6050565b6040516047919060b1565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000609d826074565b9050919050565b60ab816094565b82525050565b600060208201905060c4600083018460a4565b9291505056fea264697066735822122080a17f555ebfdfed7bb6bb448bb53c85a9709f677a8ef0c9bd96956b7ff5e37d64736f6c63430008130033a2646970667358221220d95b20a8fe01320ba12fede4ea490a827bee9eff1fa82a05abcc76f2df2165c264736f6c63430008130033";

type MyContractFactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MyContractFactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MyContractFactory__factory extends ContractFactory {
  constructor(...args: MyContractFactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MyContractFactory & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MyContractFactory__factory {
    return super.connect(runner) as MyContractFactory__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MyContractFactoryInterface {
    return new Interface(_abi) as MyContractFactoryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MyContractFactory {
    return new Contract(address, _abi, runner) as unknown as MyContractFactory;
  }
}
